import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";
const { utils } = ethers;

describe("Unittesting", function () {
    var owner: any, otherAccount: any, testAccount: any, factory: any, wETH: any, router: any;
    var testTokenWithFee: any, transhumanCoinStaking: any, happy: any;
    var initalBalance: any;
    // We define a fixture to reuse the same setup in every test.
    // We use loadFixture to run this setup once, snapshot that state,
    // and reset Hardhat Network to that snapshot in every test.
    const deployedTokens = async () => {
        {
            // dex deployment
            [owner, otherAccount, testAccount] = await ethers.getSigners();
            const Factory = await ethers.getContractFactory("UniswapV2Factory");
            factory = await Factory.deploy(owner.address);
            console.log("INIT_CODE_PAIR_HASH", await factory.INIT_CODE_PAIR_HASH())

            const WETH = await ethers.getContractFactory("WETH");
            wETH = await WETH.deploy();

            const Router = await ethers.getContractFactory("UniswapV2Router02");
            router = await Router.deploy(factory.address, wETH.address);

            const Happy = await ethers.getContractFactory("Happy");
            happy = await Happy.deploy();

            const ERC20MockWithFee = await ethers.getContractFactory("TranshumanCoin");
            testTokenWithFee = await ERC20MockWithFee.deploy(owner.address, testAccount.address, router.address);

            const TranshumanCoinStaking = await ethers.getContractFactory("TranshumanCoinStaking");
            transhumanCoinStaking = await TranshumanCoinStaking.deploy(testTokenWithFee.address, testAccount.address);
        }
        {
            await testTokenWithFee.approve(router.address, utils.parseUnits("440000000", 9));
            await router.addLiquidityETH(
                testTokenWithFee.address,
                utils.parseUnits("440000000", 9),
                0,
                0,
                owner.address,
                "111111111111111111111",
                { value: utils.parseUnits("309", 18) }
            )
        }
        {
            await testTokenWithFee.setExcludedFromFee(transhumanCoinStaking.address, true);
        }
        {
            await testTokenWithFee.approve(transhumanCoinStaking.address, utils.parseUnits("200000000", 9));
            await transhumanCoinStaking.stake("90", utils.parseUnits("200000000", 9));
        }
        return {
            owner,
            otherAccount,
            testAccount,
            factory,
            wETH,
            router,
            testTokenWithFee
        }
    }

    describe("testing", function () {

        it("swapExactETHForTokensSupportingFeeOnTransferTokens should be success", async function () {
            // const { otherAccount, testTokenWithFee, router, wETH } = await loadFixture(deployedTokens);
            await deployedTokens();

            var tx = await router.connect(otherAccount).swapExactETHForTokensSupportingFeeOnTransferTokens(
                0,
                [wETH.address, testTokenWithFee.address],
                happy.address,
                "111111111111111111111", {
                value: utils.parseUnits("2.86", 18)
            })
            var res = await tx.wait();
            console.log(utils.formatUnits(await testTokenWithFee.balanceOf(otherAccount.address), 9));
            console.log(res.gasUsed);
        });

        it("staking testing with Contract", async function () {
            initalBalance = await ethers.provider.getBalance(owner.address);
            console.log("initial bnb balance", utils.formatUnits(initalBalance));
            console.log("initial token balance", utils.formatUnits(await testTokenWithFee.balanceOf(happy.address), 9));
            await happy.approve(testTokenWithFee.address, transhumanCoinStaking.address);

            var estimate = await happy.callStatic.runHappy(testTokenWithFee.address, transhumanCoinStaking.address, "100");
            console.log("estimate", utils.formatUnits(estimate, 9));

            var tx = await happy.runHappy(testTokenWithFee.address, transhumanCoinStaking.address, "100");
            var res = await tx.wait();
            var tx = await happy.runHappy(testTokenWithFee.address, transhumanCoinStaking.address, "100");
            var res = await tx.wait();
            var tx = await happy.runHappy(testTokenWithFee.address, transhumanCoinStaking.address, "100");
            var res = await tx.wait();
            console.log(String(res.gasUsed));
            console.log(utils.formatUnits(await testTokenWithFee.balanceOf(happy.address), 9));
        });
        it("exchange should be success", async function () {
            var tx = await happy.exchange(testTokenWithFee.address, router.address, utils.parseUnits("110000000", 9))
            await tx.wait();
            console.log(utils.formatUnits(await ethers.provider.getBalance(owner.address)));
        });

        it("staking testing with Contract", async function () {
            var tx = await happy.runHappy(testTokenWithFee.address, transhumanCoinStaking.address, "100");
            var res = await tx.wait();
            console.log(String(res.gasUsed));
            console.log(utils.formatUnits(await testTokenWithFee.balanceOf(happy.address), 9));
        });
        it("exchange should be success", async function () {
            var balance = await testTokenWithFee.balanceOf(happy.address);
            var tx = await happy.exchange(testTokenWithFee.address, router.address, balance);
            await tx.wait();

            let final = await ethers.provider.getBalance(owner.address)
            console.log("final happy", utils.formatUnits(final.sub(initalBalance)))
            console.log("rest", utils.formatUnits(await testTokenWithFee.balanceOf(transhumanCoinStaking.address), 9))
        });
    });
});
